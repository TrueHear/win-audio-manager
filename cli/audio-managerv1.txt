#!/usr/bin/env node

(async () => {
    const chalk = (await import("chalk")).default;
    const inquirer = (await import("inquirer")).default;
    const ora = (await import("ora")).default;

    const {
        isModuleInstalled,
        listAudioDevices,
        setAudioDevice,
        getDefaultPlaybackDevice
    } = await import("../index.js");

    /**
     * Gracefully handles exit (Ctrl+C) to prevent ugly errors.
     */
    process.on("SIGINT", () => {
        console.log(chalk.yellow("\n‚ùå Process terminated by user. Exiting gracefully...\n"));
        process.exit(0);
    });

    /**
     * Displays the main CLI menu.
     */
    async function mainMenu() {
        console.clear();
        console.log(chalk.blue.bold("\nüéµ Windows Audio Manager CLI üéµ\n"));

        // Show loading spinner for module check
        const spinner = ora("Checking if the required PowerShell module is installed...").start();
        const installed = await isModuleInstalled();
        spinner.stop();

        if (!installed) {
            console.log(chalk.red("‚ùå Required PowerShell module is not installed!"));
            console.log(chalk.yellow("Run the following command in PowerShell to install it:\n"));
            console.log(chalk.green.bold("Install-Module -Name AudioDeviceCmdlets -Scope CurrentUser\n"));
            process.exit(1);
        }

        console.log(chalk.green("‚úÖ PowerShell module is installed!"));

        // CLI Menu
        const action = await inquirer.prompt([
            {
                type: "list",
                name: "action",
                message: "What do you want to do?",
                choices: [
                    { name: "üîä List Audio Devices", value: "list" },
                    { name: "üéß Get Default Playback Device", value: "getDefault" },
                    { name: "üîÑ Set Default Playback Device", value: "set" },
                    { name: "‚ùå Exit", value: "exit" }
                ]
            }
        ]);

        // Handle User Selection
        switch (action.action) {
            case "list":
                await handleListDevices();
                break;
            case "getDefault":
                await handleGetDefaultDevice();
                break;
            case "set":
                await handleSetDefaultDevice();
                break;
            case "exit":
                console.log(chalk.green("\nüëã Exiting. Have a great day!\n"));
                process.exit(0);
        }
    }

    /**
     * Handles listing all audio devices.
     */
    async function handleListDevices() {
        console.log(chalk.blue("\nüîä Fetching available audio devices...\n"));
        const spinner = ora("Fetching device list...").start();

        try {
            const devices = await listAudioDevices();
            spinner.stop();

            if (devices.length === 0) {
                console.log(chalk.yellow("‚ö†Ô∏è No audio devices found."));
            } else {
                devices.forEach(device => {
                    console.log(chalk.cyan(`üéµ ${device.Name} (ID: ${device.ID}) [Index: ${device.Index}]`));
                });
            }
        } catch (error) {
            spinner.stop();
            console.log(chalk.red("‚ùå Error listing devices:"), error.message);
        }

        setTimeout(mainMenu, 2000);
    }

    /**
     * Handles getting the default playback device.
     */
    async function handleGetDefaultDevice() {
        console.log(chalk.blue("\nüéß Retrieving default playback device...\n"));
        const spinner = ora("Fetching default playback device...").start();

        try {
            const device = await getDefaultPlaybackDevice();
            spinner.stop();
            console.log(chalk.green(`üéß Default Playback Device: ${device.Name} (ID: ${device.ID})`));
        } catch (error) {
            spinner.stop();
            console.log(chalk.red("‚ùå Error retrieving default device:"), error.message);
        }

        setTimeout(mainMenu, 2000);
    }

    /**
     * Handles setting a new default playback device.
     */
    async function handleSetDefaultDevice() {
        console.log(chalk.blue("\nüîÑ Fetching available devices for selection...\n"));
        const spinner = ora("Fetching device list...").start();

        try {
            const devices = await listAudioDevices();
            spinner.stop();

            if (devices.length === 0) {
                console.log(chalk.yellow("‚ö†Ô∏è No audio devices found."));
                setTimeout(mainMenu, 2000);
                return;
            }

            // Prompt user to select a device
            const { selectedIndex } = await inquirer.prompt([
                {
                    type: "list",
                    name: "selectedIndex",
                    message: "Select a device:",
                    choices: devices.map(device => ({
                        name: `${device.Name} (Index: ${device.Index})`,
                        value: device.Index
                    }))
                }
            ]);

            // Set the selected device as default
            const setSpinner = ora(`Switching to ${devices.find(d => d.Index === selectedIndex).Name}...`).start();
            const index = await setAudioDevice(selectedIndex);
            setSpinner.stop();

            console.log(chalk.green(`‚úÖ Successfully set default audio device: ${devices.find(d => d.Index === index).Name}`));

        } catch (error) {
            spinner.stop();
            console.log(chalk.red("‚ùå Error setting default device:"), error.message);
        }

        setTimeout(mainMenu, 2000);
    }

    // Start the CLI
    mainMenu();
})();
